#!/usr/bin/env python

import subprocess


def get_vrams():
    proc = subprocess.Popen(['vram'], stdout=subprocess.PIPE)
    out, err = proc.communicate()

    if not err:
        ret = out[:-1] if out[-1] == '\n' else out
        return ret.split(' ')
    return ""


def get_from_atiflash():
    proc = subprocess.Popen(['sudo', 'atiflash', '-i'], stdout=subprocess.PIPE)
    out, err = proc.communicate()

    lst = out.splitlines()
    ret = []
    for s in lst[3:]:
        row = [l for l in s.split(' ') if l]
        ret.append({
            'ssid': row[3],
            'model': row[4],
            'flash-type': row[5],
            'rom-size': row[6],
            'bios-version': row[8],
        })
    return ret


def stripped(s):
    bad = ['[', ']']
    for ch in bad:
        s = s.replace(ch, '')
    return s.strip()


def get_gpu_list():
    proc = subprocess.Popen(['./gpu-info'], stdout=subprocess.PIPE)
    out, err = proc.communicate()

    proc1 = subprocess.Popen(['sudo', 'bin/amdmeminfo', '-o', '-s', '-q'], stdout=subprocess.PIPE)
    out1, err1 = proc1.communicate()

    lst1 = out.splitlines()
    lst2 = out1.splitlines()
    ret = []
    for l, m in zip(lst1, lst2):
        lst = l.split(' ')
        model = ' '.join(lst[2:4])
        memory = m.split(':')[4]
        memory = memory.split('-')[0].split(' ')[:-1]
        memory = ' '.join(memory)
        ret.append(
            (lst[0], lst[1], stripped(model), memory)
        )
    return ret


def get_cards():
    vrams = get_vrams()
    cards = get_from_atiflash()
    gpus = get_gpu_list()
    ret = []
    for card, vram, gpu in zip(cards, vrams, gpus):
        card['vram-size'] = vram
        card['id'] = gpu[0]
        card['model-1'] = gpu[2]
        card['memory'] = gpu[3]
        ret.append(card)
    return ret


def main():
    cards = get_cards()
    for card in cards:
        print card
    print "Done!!!"


if __name__ == "__main__":
    main()
