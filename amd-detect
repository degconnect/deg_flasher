#!/usr/bin/env python

import subprocess
from time import sleep


def get_vrams():
    proc = subprocess.Popen(['./vram'], stdout=subprocess.PIPE)
    out, err = proc.communicate()

    if not err:
        ret = out[:-1] if out[-1] == '\n' else out
        return ret.split(' ')
    return ""


def get_from_atiflash():
    proc = subprocess.Popen(['sudo', 'atiflash', '-i'], stdout=subprocess.PIPE)
    out, err = proc.communicate()

    lst = out.splitlines()
    ret = []
    for s in lst[3:]:
        row = [l for l in s.split(' ') if l]
        ret.append({
            'ssid': row[3],
            'model': row[4],
            'flash-type': row[5],
            'rom-size': row[6],
            'bios-version': row[8],
        })
    return ret


def stripped(s):
    bad = ['[', ']']
    for ch in bad:
        s = s.replace(ch, '')
    return s.strip()


def get_gpu_list():
    proc = subprocess.Popen(['./gpu-info'], stdout=subprocess.PIPE)
    out, err = proc.communicate()

    proc1 = subprocess.Popen(['sudo', 'bin/amdmeminfo', '-o', '-s', '-q'], stdout=subprocess.PIPE)
    out1, err1 = proc1.communicate()

    lst1 = out.splitlines()
    lst2 = out1.splitlines()
    ret = []
    for l, m in zip(lst1, lst2):
        lst = l.split(' ')
        model = ' '.join(lst[2:4])
        memory = m.split(':')[4]
        memory = memory.split('-')[0].split(' ')[:-1]
        memory = ' '.join(memory)
        ret.append(
            (lst[0], lst[1], stripped(model), memory)
        )
    return ret


def get_cards():
    vrams = get_vrams()
    cards = get_from_atiflash()
    gpus = get_gpu_list()
    ret = []
    for card, vram, gpu in zip(cards, vrams, gpus):
        card['vram-size'] = vram
        card['id'] = gpu[0]
        card['model-1'] = gpu[2]
        card['memory'] = gpu[3]
        ret.append(card)
    return ret


def can_be_flash(card):
    return card['model'] == 'Ellesmere'


def gen_rom_filename(card):
    mem_size = card['vram-size']
    rom_size = int(card['rom-size'])/10000
    bios_version = card['bios-version']
    bios_version = bios_version.replace('.', '-')
    ret = "{}-{}GB-{}-{}GB-ROM-{}.rom".format(card['model-1'], mem_size, card['memory'], rom_size, bios_version)
    ret = ret.replace(' ', '-')
    return ret


def backup(card):
    """
    :param card:
    :return:
    backup ROMusing ATIFLASH and send the backup to our servers
    """
    filename = gen_rom_filename(card)
    print "Backup card: {0}: {1} to file: {2}".format(card['ix'], card['model-1'], filename)
    print


def flash(card):
    """
    :param card:
    :return:
    get the modded rom from our servers and flash into the card using atiflash
    """
    print "flashing card: {0} -> {1}".format(card['ix'], card['model-1'])


def main():
    print "DEG Flasher only works for Ellesmere RX 470/480/570/580"
    print "Please, remember to put all the cards in OC Mode. Check that and stop this if not in OC Mode."
    sleep(3)
    print "Detecting all cards"
    cards = get_cards()
    flash_list, unknown = [], []
    ix = 0
    print "#\tModel\tFlash Type\tROM Size\tMemory Type\tVRAM Size\tBios Version"
    for card in cards:
        card['ix'] = ix
        ix += 1
        if can_be_flash(card):
            flash_list.append(card)
        else:
            unknown.append(card)
        print "{}\t{}\t{}\t{}\t\t{}\t\t{}\t{}".format(card['ix'], card['model-1'], card['flash-type'],
                                                      card['rom-size'], card['memory'], card['vram-size'],
                                                      card['bios-version'])
    if len(flash_list) == len(cards):
        print "Good News!!!\nAll your cards can be modded!!!!"
    elif flash:
        print "Not all your cards can be modded!\nWe only can flash AMD RX 470/480/570/580."
    else:
        print "Bad news.\nSorry, no card can be modded.\nWe only can flash AMD RX 470/480/570/580."
        return
    for card in flash_list:
        backup(card)
        flash(card)

    print "Done!!!"


if __name__ == "__main__":
    main()
